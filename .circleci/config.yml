version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
           
commands:
    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            when_destroy:
                type: string
                default: "on_fail"  
        steps:
            - run:
                name: Destroy environments
                when: on_fail
                command: |
                    echo "############-- Destroying environment --############"
                    aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                    aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
                    aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}      
                    aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}           
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: "Test Frontend"
                command: |
                    cd frontend
                    npm install
                    npm run test
                    
  test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: "Test Backend"
                command: |
                    cd backend
                    npm install
                    npm run test                    
                    
  scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
           - checkout
           - restore_cache:
               keys: [frontend-build]
           - run:
               name: "Scan frontend for vulnerabilities"
               command: |
                   cd frontend
                   npm install
                   npm audit fix --audit-level=critical --force
                   npm audit --audit-level=critical
    
  scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
           - checkout
           - restore_cache:
               keys: [backend-build]
           - run:
               name: "Scan the backend for vulnerabilities"
               command: |
                   cd backend
                   npm install
                   npm audit fix --audit-level=critical --force
                   npm audit fix --force
                   npm audit --audit-level=critical
           - slack/notify:
               channel: C03DAJYL3SM
               event: fail
               template: basic_fail_1

  deploy-infrastructure:
        docker:
            - image: amazon/aws-cli
        steps:
        - checkout
        - run:
            name: "Install dependancies"
            command: |
                yum install tar gzip -y
                yum update -y
        - attach_workspace:
                at: ~/
        - run:
            name: Ensure back-end infrastructure exists
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
        - run:
            name: Ensure front-end infrastructure exist
            command: |
                aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                cd .circleci/ansible
                aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
                - project/.circleci/ansible/inventory.txt
        - destroy-environment
        
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9a:35:9f:88:fb:9c:2d:10:7b:0c:aa:ce:af:5e:a0:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment      

  run-migrations:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: install dependancies
                command: |
                    sudo apt-get update && sudo apt-get upgrade
                    sudo apt-get install curl tar -y
                    sudo apt-get install awscli -y
            - attach_workspace:
                at: ~/
            - run:
                name: Run migrations
                command: |
                    cd backend
                    npm install
                    npm run migrations > migrations_dump.txt
                    cat migrations_dump.txt
            - run:
                name: Send migration results to kvdb
                command: |
                    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then 
                        curl --insecure https://kvdb.io/T1o59vrC9j1aCr8oMRDpZP/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
                    fi
            - destroy-environment 
            - revert-migrations
           
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          context:
            - udapeople_notify
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend,test-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]        
      - run-migrations:
          requires: [configure-infrastructure]                
